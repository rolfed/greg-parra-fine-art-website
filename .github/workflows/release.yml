name: Release

on: 
  push:
    tags:
      - 'v*.*.*' # Trigger on version tag, e.g., v1.0.0
  workflow_dispatch:  # Allows manual triggering

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Ensures write access to create releases

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm ci

      - name: Build the Project
        run: npm run build # Ensure this outputs to the dist directory

      - name: Update Dynamic Pre-release Version
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: |
          DATE=$(date +'%Y%m%d%H%M%S')
          SHORT_SHA=$(git rev-parse --short HEAD)
          npm version 0.0.1-next.$DATE.$SHORT_SHA --no-git-tag-version
          cat package.json

      - name: Publish Pre-release Version to npm (next tag)
        if: "!startsWith(github.ref, 'refs/tags/v')" # Run only for pre-release versions
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag next --access public

      - name: Increment Version and Publish Final
        if: startsWith(github.ref, 'refs/tags/v')  # Run only for final versions
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm version from-git --no-git-tag-version
          npm publish --provenance --access public --tag latest

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')  # Only run if a version tag is pushed
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${context.ref.replace('refs/tags/', '')}`,
              body: '',
              draft: false,
              prerelease: false,
              generate_release_notes: true
            });
            core.setOutput("html_url", release.html_url);

      - name: Display Release URL
        run: echo "Release published at ${{ steps.create_release.outputs.html_url }}"

